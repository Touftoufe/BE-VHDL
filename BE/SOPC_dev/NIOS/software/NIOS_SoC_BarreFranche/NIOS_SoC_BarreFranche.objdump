
NIOS_SoC_BarreFranche.elf:     file format elf32-littlenios2
NIOS_SoC_BarreFranche.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000d18 memsz 0x00000d18 flags r-x
    LOAD off    0x00001d38 vaddr 0x00010d38 paddr 0x00010e28 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001f18 vaddr 0x00010f18 paddr 0x00010f18 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001e28  2**0
                  CONTENTS
  2 .text         00000cec  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  00010d0c  00010d0c  00001d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00010d38  00010e28  00001d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00010f18  00010f18  00001f18  2**2
                  ALLOC, SMALL_DATA
  6 .SRAM         00000000  00010f28  00010f28  00001e28  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  00001e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000036d1  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001398  00000000  00000000  000057d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000169a  00000000  00000000  00006b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003bc  00000000  00000000  00008204  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fcc  00000000  00000000  000085c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001352  00000000  00000000  0000958c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a8e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  0000a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000bbd5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0000bbd8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000bbe0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000bbe1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000bbe2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000bbe6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000bbea  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  0000bbee  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  0000bbf1  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00047a93  00000000  00000000  0000bc36  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010d0c l    d  .rodata	00000000 .rodata
00010d38 l    d  .rwdata	00000000 .rwdata
00010f18 l    d  .bss	00000000 .bss
00010f28 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/SofianeAOUCI/Desktop/BE_VHDL_AOUCI_BONHOURE/BE/SOPC_dev/NIOS/software/NIOS_SoC_BarreFranche_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010244 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00010d38 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010be0 g     F .text	0000002c alt_main
00010e28 g       *ABS*	00000000 __flash_rwdata_start
000101f8 g     F .text	0000004c printf
00010c0c g     F .text	00000038 alt_putstr
00010d04 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010f18 g     O .bss	00000004 errno
00010f20 g     O .bss	00000004 alt_argv
00018e18 g       *ABS*	00000000 _gp
00010e20 g     O .rwdata	00000004 jtag
0001005c g     F .text	00000034 NMEA_TX_Data
000101bc g     F .text	0000003c _printf_r
00010a1c g     F .text	00000064 .hidden __udivsi3
00010e18 g     O .rwdata	00000004 _global_impure_ptr
00010f28 g       *ABS*	00000000 __bss_end
00010cfc g     F .text	00000004 alt_dcache_flush_all
00010e28 g       *ABS*	00000000 __ram_rwdata_end
00010c44 g     F .text	00000060 write
00010d38 g       *ABS*	00000000 __ram_rodata_end
00010a80 g     F .text	00000058 .hidden __umodsi3
00010f28 g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010cc8 g     F .text	00000034 altera_avalon_jtag_uart_write
000102b0 g     F .text	0000052c ___vfprintf_internal_r
00010020 g     F .text	0000003c _start
00010cc4 g     F .text	00000004 alt_sys_init
00010ad8 g     F .text	00000028 .hidden __mulsi3
00010d38 g       *ABS*	00000000 __ram_rwdata_start
00010d0c g       *ABS*	00000000 __ram_rodata_start
00010f28 g       *ABS*	00000000 __alt_stack_base
000107f8 g     F .text	000000b8 __sfvwrite_small_dev
00010f18 g       *ABS*	00000000 __bss_start
000100b0 g     F .text	0000010c main
00010f1c g     O .bss	00000004 alt_envp
00010e24 g     O .rwdata	00000004 alt_errno
00010924 g     F .text	00000084 .hidden __divsi3
00010d0c g       *ABS*	00000000 __flash_rodata_start
00010090 g     F .text	00000020 delay
00010ca4 g     F .text	00000020 alt_irq_init
000108cc g     F .text	00000058 _write_r
00010e1c g     O .rwdata	00000004 _impure_ptr
00010f24 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010e28 g       *ABS*	00000000 _edata
00010f28 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000109a8 g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
000108b0 g     F .text	0000001c strlen
00010000 g       *ABS*	00000000 __alt_mem_SRAM
00010d00 g     F .text	00000004 alt_icache_flush_all
000107dc g     F .text	0000001c __vfprintf_internal
00010b00 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a38614 	ori	gp,gp,36376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1083c614 	ori	r2,r2,3864

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c3ca14 	ori	r3,r3,3880

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff6044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010b000 	call	10b00 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010be00 	call	10be0 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff6058>

0001005c <NMEA_TX_Data>:
#define NMEA_TX_dizaine (unsigned int *) (NMEA_TX_0_BASE + 12)
#define NMEA_TX_unite (unsigned int *) (NMEA_TX_0_BASE + 16)
#define NMEA_TX_Config(ST, reset_n) (*NMEA_TX_conf = (ST << 1) | reset_n)

void NMEA_TX_Data(unsigned int sync, unsigned cent, unsigned diz, unsigned unit){
	 *NMEA_TX_synchro = sync;
   1005c:	008000b4 	movhi	r2,2
   10060:	10840904 	addi	r2,r2,4132
   10064:	11000015 	stw	r4,0(r2)
	 *NMEA_TX_centaine = cent;
   10068:	008000b4 	movhi	r2,2
   1006c:	10840a04 	addi	r2,r2,4136
   10070:	11400015 	stw	r5,0(r2)
	 *NMEA_TX_dizaine = diz;
   10074:	008000b4 	movhi	r2,2
   10078:	10840b04 	addi	r2,r2,4140
   1007c:	11800015 	stw	r6,0(r2)
	 *NMEA_TX_unite = unit;
   10080:	008000b4 	movhi	r2,2
   10084:	10840c04 	addi	r2,r2,4144
   10088:	11c00015 	stw	r7,0(r2)
   1008c:	f800283a 	ret

00010090 <delay>:
  }

  return 0;
}

void delay(volatile long unsigned t){
   10090:	deffff04 	addi	sp,sp,-4
   10094:	d9000015 	stw	r4,0(sp)
	while(t--);
   10098:	d8800017 	ldw	r2,0(sp)
   1009c:	10ffffc4 	addi	r3,r2,-1
   100a0:	d8c00015 	stw	r3,0(sp)
   100a4:	103ffc1e 	bne	r2,zero,10098 <__alt_data_end+0xffff6098>
}
   100a8:	dec00104 	addi	sp,sp,4
   100ac:	f800283a 	ret

000100b0 <main>:
}

void delay(volatile long unsigned t);
int main()
{ 
  alt_putstr("Hello Toufoufe from Nios II!\n");
   100b0:	01000074 	movhi	r4,1
	 *NMEA_TX_unite = unit;
}

void delay(volatile long unsigned t);
int main()
{ 
   100b4:	defffc04 	addi	sp,sp,-16
  alt_putstr("Hello Toufoufe from Nios II!\n");
   100b8:	21034304 	addi	r4,r4,3340
	 *NMEA_TX_unite = unit;
}

void delay(volatile long unsigned t);
int main()
{ 
   100bc:	dc000015 	stw	r16,0(sp)
   100c0:	dfc00315 	stw	ra,12(sp)
   100c4:	dc800215 	stw	r18,8(sp)
   100c8:	dc400115 	stw	r17,4(sp)
  alt_putstr("Hello Toufoufe from Nios II!\n");
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 7);
   100cc:	040000b4 	movhi	r16,2
}

void delay(volatile long unsigned t);
int main()
{ 
  alt_putstr("Hello Toufoufe from Nios II!\n");
   100d0:	0010c0c0 	call	10c0c <alt_putstr>
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 7);
   100d4:	008001c4 	movi	r2,7
   100d8:	84041804 	addi	r16,r16,4192
   100dc:	80800035 	stwio	r2,0(r16)
  PWM_set_precaler(5000-1);
   100e0:	00c000b4 	movhi	r3,2
   100e4:	0104e1c4 	movi	r4,4999
   100e8:	18c41c04 	addi	r3,r3,4208
   100ec:	19000015 	stw	r4,0(r3)
  PWM_set_freq(1000-1); // 10 Hz
   100f0:	00c000b4 	movhi	r3,2
   100f4:	0100f9c4 	movi	r4,999
   100f8:	18c41d04 	addi	r3,r3,4212
   100fc:	19000015 	stw	r4,0(r3)
  PWM_set_duty(500-1);
   10100:	00c000b4 	movhi	r3,2
   10104:	01007cc4 	movi	r4,499
   10108:	18c41e04 	addi	r3,r3,4216
   1010c:	19000015 	stw	r4,0(r3)
  PWM_enable(1);
   10110:	00c000b4 	movhi	r3,2
   10114:	01000044 	movi	r4,1
   10118:	18c41f04 	addi	r3,r3,4220
   1011c:	19000015 	stw	r4,0(r3)
  ANEMOMETRE_Config(0,1,1);
   10120:	010000b4 	movhi	r4,2
   10124:	00c000c4 	movi	r3,3
   10128:	21042204 	addi	r4,r4,4232
   1012c:	20c00015 	stw	r3,0(r4)
#define NMEA_TX_dizaine (unsigned int *) (NMEA_TX_0_BASE + 12)
#define NMEA_TX_unite (unsigned int *) (NMEA_TX_0_BASE + 16)
#define NMEA_TX_Config(ST, reset_n) (*NMEA_TX_conf = (ST << 1) | reset_n)

void NMEA_TX_Data(unsigned int sync, unsigned cent, unsigned diz, unsigned unit){
	 *NMEA_TX_synchro = sync;
   10130:	010000b4 	movhi	r4,2
   10134:	014008c4 	movi	r5,35
   10138:	21040904 	addi	r4,r4,4132
   1013c:	21400015 	stw	r5,0(r4)
	 *NMEA_TX_centaine = cent;
   10140:	010000b4 	movhi	r4,2
   10144:	01402604 	movi	r5,152
   10148:	21040a04 	addi	r4,r4,4136
   1014c:	21400015 	stw	r5,0(r4)
	 *NMEA_TX_dizaine = diz;
   10150:	010000b4 	movhi	r4,2
   10154:	01400084 	movi	r5,2
   10158:	21040b04 	addi	r4,r4,4140
   1015c:	21400015 	stw	r5,0(r4)
	 *NMEA_TX_unite = unit;
   10160:	010000b4 	movhi	r4,2
   10164:	21040c04 	addi	r4,r4,4144
   10168:	01400444 	movi	r5,17
   1016c:	21400015 	stw	r5,0(r4)
  PWM_set_duty(500-1);
  PWM_enable(1);
  ANEMOMETRE_Config(0,1,1);

  NMEA_TX_Data(0x23,0x98,0x02,0x11);
  NMEA_TX_Config(1,1);
   10170:	010000b4 	movhi	r4,2
   10174:	21040804 	addi	r4,r4,4128
  while (1){
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 7);
	  delay(500000);
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0);
	  delay(500000);
	  printf("Freq = %d\n", ANEMOMETRE_get_freq());
   10178:	048000b4 	movhi	r18,2
  PWM_set_duty(500-1);
  PWM_enable(1);
  ANEMOMETRE_Config(0,1,1);

  NMEA_TX_Data(0x23,0x98,0x02,0x11);
  NMEA_TX_Config(1,1);
   1017c:	20c00015 	stw	r3,0(r4)
  while (1){
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 7);
   10180:	1023883a 	mov	r17,r2
	  delay(500000);
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0);
	  delay(500000);
	  printf("Freq = %d\n", ANEMOMETRE_get_freq());
   10184:	94842304 	addi	r18,r18,4236
  ANEMOMETRE_Config(0,1,1);

  NMEA_TX_Data(0x23,0x98,0x02,0x11);
  NMEA_TX_Config(1,1);
  while (1){
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 7);
   10188:	84400035 	stwio	r17,0(r16)
	  delay(500000);
   1018c:	01000234 	movhi	r4,8
   10190:	21284804 	addi	r4,r4,-24288
   10194:	00100900 	call	10090 <delay>
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0);
   10198:	80000035 	stwio	zero,0(r16)
	  delay(500000);
   1019c:	01000234 	movhi	r4,8
   101a0:	21284804 	addi	r4,r4,-24288
   101a4:	00100900 	call	10090 <delay>
	  printf("Freq = %d\n", ANEMOMETRE_get_freq());
   101a8:	91400003 	ldbu	r5,0(r18)
   101ac:	01000074 	movhi	r4,1
   101b0:	21034b04 	addi	r4,r4,3372
   101b4:	00101f80 	call	101f8 <printf>
   101b8:	003ff306 	br	10188 <__alt_data_end+0xffff6188>

000101bc <_printf_r>:
   101bc:	defffd04 	addi	sp,sp,-12
   101c0:	dfc00015 	stw	ra,0(sp)
   101c4:	d9800115 	stw	r6,4(sp)
   101c8:	d9c00215 	stw	r7,8(sp)
   101cc:	20c00217 	ldw	r3,8(r4)
   101d0:	01800074 	movhi	r6,1
   101d4:	3181fe04 	addi	r6,r6,2040
   101d8:	19800115 	stw	r6,4(r3)
   101dc:	280d883a 	mov	r6,r5
   101e0:	21400217 	ldw	r5,8(r4)
   101e4:	d9c00104 	addi	r7,sp,4
   101e8:	00102b00 	call	102b0 <___vfprintf_internal_r>
   101ec:	dfc00017 	ldw	ra,0(sp)
   101f0:	dec00304 	addi	sp,sp,12
   101f4:	f800283a 	ret

000101f8 <printf>:
   101f8:	defffc04 	addi	sp,sp,-16
   101fc:	dfc00015 	stw	ra,0(sp)
   10200:	d9400115 	stw	r5,4(sp)
   10204:	d9800215 	stw	r6,8(sp)
   10208:	d9c00315 	stw	r7,12(sp)
   1020c:	00800074 	movhi	r2,1
   10210:	10838704 	addi	r2,r2,3612
   10214:	10800017 	ldw	r2,0(r2)
   10218:	01400074 	movhi	r5,1
   1021c:	2941fe04 	addi	r5,r5,2040
   10220:	10c00217 	ldw	r3,8(r2)
   10224:	d9800104 	addi	r6,sp,4
   10228:	19400115 	stw	r5,4(r3)
   1022c:	200b883a 	mov	r5,r4
   10230:	11000217 	ldw	r4,8(r2)
   10234:	00107dc0 	call	107dc <__vfprintf_internal>
   10238:	dfc00017 	ldw	ra,0(sp)
   1023c:	dec00404 	addi	sp,sp,16
   10240:	f800283a 	ret

00010244 <print_repeat>:
   10244:	defffb04 	addi	sp,sp,-20
   10248:	dc800315 	stw	r18,12(sp)
   1024c:	dc400215 	stw	r17,8(sp)
   10250:	dc000115 	stw	r16,4(sp)
   10254:	dfc00415 	stw	ra,16(sp)
   10258:	2025883a 	mov	r18,r4
   1025c:	2823883a 	mov	r17,r5
   10260:	d9800005 	stb	r6,0(sp)
   10264:	3821883a 	mov	r16,r7
   10268:	04000a0e 	bge	zero,r16,10294 <print_repeat+0x50>
   1026c:	88800117 	ldw	r2,4(r17)
   10270:	01c00044 	movi	r7,1
   10274:	d80d883a 	mov	r6,sp
   10278:	880b883a 	mov	r5,r17
   1027c:	9009883a 	mov	r4,r18
   10280:	103ee83a 	callr	r2
   10284:	843fffc4 	addi	r16,r16,-1
   10288:	103ff726 	beq	r2,zero,10268 <__alt_data_end+0xffff6268>
   1028c:	00bfffc4 	movi	r2,-1
   10290:	00000106 	br	10298 <print_repeat+0x54>
   10294:	0005883a 	mov	r2,zero
   10298:	dfc00417 	ldw	ra,16(sp)
   1029c:	dc800317 	ldw	r18,12(sp)
   102a0:	dc400217 	ldw	r17,8(sp)
   102a4:	dc000117 	ldw	r16,4(sp)
   102a8:	dec00504 	addi	sp,sp,20
   102ac:	f800283a 	ret

000102b0 <___vfprintf_internal_r>:
   102b0:	deffe504 	addi	sp,sp,-108
   102b4:	d8c00804 	addi	r3,sp,32
   102b8:	ddc01815 	stw	r23,96(sp)
   102bc:	dd801715 	stw	r22,92(sp)
   102c0:	dd401615 	stw	r21,88(sp)
   102c4:	dd001515 	stw	r20,84(sp)
   102c8:	dcc01415 	stw	r19,80(sp)
   102cc:	dc801315 	stw	r18,76(sp)
   102d0:	dc401215 	stw	r17,72(sp)
   102d4:	dc001115 	stw	r16,68(sp)
   102d8:	dfc01a15 	stw	ra,104(sp)
   102dc:	df001915 	stw	fp,100(sp)
   102e0:	2029883a 	mov	r20,r4
   102e4:	2823883a 	mov	r17,r5
   102e8:	382d883a 	mov	r22,r7
   102ec:	d9800f15 	stw	r6,60(sp)
   102f0:	0021883a 	mov	r16,zero
   102f4:	d8000e15 	stw	zero,56(sp)
   102f8:	d8000a15 	stw	zero,40(sp)
   102fc:	002b883a 	mov	r21,zero
   10300:	0027883a 	mov	r19,zero
   10304:	0025883a 	mov	r18,zero
   10308:	d8000c15 	stw	zero,48(sp)
   1030c:	d8000b15 	stw	zero,44(sp)
   10310:	002f883a 	mov	r23,zero
   10314:	d8c00915 	stw	r3,36(sp)
   10318:	d8c00f17 	ldw	r3,60(sp)
   1031c:	19000003 	ldbu	r4,0(r3)
   10320:	20803fcc 	andi	r2,r4,255
   10324:	1080201c 	xori	r2,r2,128
   10328:	10bfe004 	addi	r2,r2,-128
   1032c:	10011e26 	beq	r2,zero,107a8 <___vfprintf_internal_r+0x4f8>
   10330:	00c00044 	movi	r3,1
   10334:	b8c01426 	beq	r23,r3,10388 <___vfprintf_internal_r+0xd8>
   10338:	1dc00216 	blt	r3,r23,10344 <___vfprintf_internal_r+0x94>
   1033c:	b8000626 	beq	r23,zero,10358 <___vfprintf_internal_r+0xa8>
   10340:	00011506 	br	10798 <___vfprintf_internal_r+0x4e8>
   10344:	01400084 	movi	r5,2
   10348:	b9401d26 	beq	r23,r5,103c0 <___vfprintf_internal_r+0x110>
   1034c:	014000c4 	movi	r5,3
   10350:	b9402b26 	beq	r23,r5,10400 <___vfprintf_internal_r+0x150>
   10354:	00011006 	br	10798 <___vfprintf_internal_r+0x4e8>
   10358:	01400944 	movi	r5,37
   1035c:	1140fc26 	beq	r2,r5,10750 <___vfprintf_internal_r+0x4a0>
   10360:	88800117 	ldw	r2,4(r17)
   10364:	d9000005 	stb	r4,0(sp)
   10368:	01c00044 	movi	r7,1
   1036c:	d80d883a 	mov	r6,sp
   10370:	880b883a 	mov	r5,r17
   10374:	a009883a 	mov	r4,r20
   10378:	103ee83a 	callr	r2
   1037c:	1000d81e 	bne	r2,zero,106e0 <___vfprintf_internal_r+0x430>
   10380:	84000044 	addi	r16,r16,1
   10384:	00010406 	br	10798 <___vfprintf_internal_r+0x4e8>
   10388:	01400c04 	movi	r5,48
   1038c:	1140fa26 	beq	r2,r5,10778 <___vfprintf_internal_r+0x4c8>
   10390:	01400944 	movi	r5,37
   10394:	11400a1e 	bne	r2,r5,103c0 <___vfprintf_internal_r+0x110>
   10398:	d8800005 	stb	r2,0(sp)
   1039c:	88800117 	ldw	r2,4(r17)
   103a0:	b80f883a 	mov	r7,r23
   103a4:	d80d883a 	mov	r6,sp
   103a8:	880b883a 	mov	r5,r17
   103ac:	a009883a 	mov	r4,r20
   103b0:	103ee83a 	callr	r2
   103b4:	1000ca1e 	bne	r2,zero,106e0 <___vfprintf_internal_r+0x430>
   103b8:	84000044 	addi	r16,r16,1
   103bc:	0000f506 	br	10794 <___vfprintf_internal_r+0x4e4>
   103c0:	25fff404 	addi	r23,r4,-48
   103c4:	bdc03fcc 	andi	r23,r23,255
   103c8:	00c00244 	movi	r3,9
   103cc:	1dc00936 	bltu	r3,r23,103f4 <___vfprintf_internal_r+0x144>
   103d0:	00bfffc4 	movi	r2,-1
   103d4:	90800426 	beq	r18,r2,103e8 <___vfprintf_internal_r+0x138>
   103d8:	01400284 	movi	r5,10
   103dc:	9009883a 	mov	r4,r18
   103e0:	0010ad80 	call	10ad8 <__mulsi3>
   103e4:	00000106 	br	103ec <___vfprintf_internal_r+0x13c>
   103e8:	0005883a 	mov	r2,zero
   103ec:	b8a5883a 	add	r18,r23,r2
   103f0:	0000e206 	br	1077c <___vfprintf_internal_r+0x4cc>
   103f4:	01400b84 	movi	r5,46
   103f8:	1140e426 	beq	r2,r5,1078c <___vfprintf_internal_r+0x4dc>
   103fc:	05c00084 	movi	r23,2
   10400:	213ff404 	addi	r4,r4,-48
   10404:	27003fcc 	andi	fp,r4,255
   10408:	00c00244 	movi	r3,9
   1040c:	1f000936 	bltu	r3,fp,10434 <___vfprintf_internal_r+0x184>
   10410:	00bfffc4 	movi	r2,-1
   10414:	98800426 	beq	r19,r2,10428 <___vfprintf_internal_r+0x178>
   10418:	01400284 	movi	r5,10
   1041c:	9809883a 	mov	r4,r19
   10420:	0010ad80 	call	10ad8 <__mulsi3>
   10424:	00000106 	br	1042c <___vfprintf_internal_r+0x17c>
   10428:	0005883a 	mov	r2,zero
   1042c:	e0a7883a 	add	r19,fp,r2
   10430:	0000d906 	br	10798 <___vfprintf_internal_r+0x4e8>
   10434:	00c01b04 	movi	r3,108
   10438:	10c0d226 	beq	r2,r3,10784 <___vfprintf_internal_r+0x4d4>
   1043c:	013fffc4 	movi	r4,-1
   10440:	99000226 	beq	r19,r4,1044c <___vfprintf_internal_r+0x19c>
   10444:	d8000b15 	stw	zero,44(sp)
   10448:	00000106 	br	10450 <___vfprintf_internal_r+0x1a0>
   1044c:	04c00044 	movi	r19,1
   10450:	01001a44 	movi	r4,105
   10454:	11001626 	beq	r2,r4,104b0 <___vfprintf_internal_r+0x200>
   10458:	20800916 	blt	r4,r2,10480 <___vfprintf_internal_r+0x1d0>
   1045c:	010018c4 	movi	r4,99
   10460:	11008826 	beq	r2,r4,10684 <___vfprintf_internal_r+0x3d4>
   10464:	01001904 	movi	r4,100
   10468:	11001126 	beq	r2,r4,104b0 <___vfprintf_internal_r+0x200>
   1046c:	01001604 	movi	r4,88
   10470:	1100c81e 	bne	r2,r4,10794 <___vfprintf_internal_r+0x4e4>
   10474:	00c00044 	movi	r3,1
   10478:	d8c00e15 	stw	r3,56(sp)
   1047c:	00001506 	br	104d4 <___vfprintf_internal_r+0x224>
   10480:	01001cc4 	movi	r4,115
   10484:	11009826 	beq	r2,r4,106e8 <___vfprintf_internal_r+0x438>
   10488:	20800416 	blt	r4,r2,1049c <___vfprintf_internal_r+0x1ec>
   1048c:	01001bc4 	movi	r4,111
   10490:	1100c01e 	bne	r2,r4,10794 <___vfprintf_internal_r+0x4e4>
   10494:	05400204 	movi	r21,8
   10498:	00000f06 	br	104d8 <___vfprintf_internal_r+0x228>
   1049c:	01001d44 	movi	r4,117
   104a0:	11000d26 	beq	r2,r4,104d8 <___vfprintf_internal_r+0x228>
   104a4:	01001e04 	movi	r4,120
   104a8:	11000a26 	beq	r2,r4,104d4 <___vfprintf_internal_r+0x224>
   104ac:	0000b906 	br	10794 <___vfprintf_internal_r+0x4e4>
   104b0:	d8c00a17 	ldw	r3,40(sp)
   104b4:	b7000104 	addi	fp,r22,4
   104b8:	18000726 	beq	r3,zero,104d8 <___vfprintf_internal_r+0x228>
   104bc:	df000d15 	stw	fp,52(sp)
   104c0:	b5c00017 	ldw	r23,0(r22)
   104c4:	b800080e 	bge	r23,zero,104e8 <___vfprintf_internal_r+0x238>
   104c8:	05efc83a 	sub	r23,zero,r23
   104cc:	02400044 	movi	r9,1
   104d0:	00000606 	br	104ec <___vfprintf_internal_r+0x23c>
   104d4:	05400404 	movi	r21,16
   104d8:	b0c00104 	addi	r3,r22,4
   104dc:	d8c00d15 	stw	r3,52(sp)
   104e0:	b5c00017 	ldw	r23,0(r22)
   104e4:	d8000a15 	stw	zero,40(sp)
   104e8:	0013883a 	mov	r9,zero
   104ec:	d839883a 	mov	fp,sp
   104f0:	b8001726 	beq	r23,zero,10550 <___vfprintf_internal_r+0x2a0>
   104f4:	a80b883a 	mov	r5,r21
   104f8:	b809883a 	mov	r4,r23
   104fc:	da401015 	stw	r9,64(sp)
   10500:	0010a1c0 	call	10a1c <__udivsi3>
   10504:	a80b883a 	mov	r5,r21
   10508:	1009883a 	mov	r4,r2
   1050c:	102d883a 	mov	r22,r2
   10510:	0010ad80 	call	10ad8 <__mulsi3>
   10514:	b885c83a 	sub	r2,r23,r2
   10518:	00c00244 	movi	r3,9
   1051c:	da401017 	ldw	r9,64(sp)
   10520:	18800216 	blt	r3,r2,1052c <___vfprintf_internal_r+0x27c>
   10524:	10800c04 	addi	r2,r2,48
   10528:	00000506 	br	10540 <___vfprintf_internal_r+0x290>
   1052c:	d8c00e17 	ldw	r3,56(sp)
   10530:	18000226 	beq	r3,zero,1053c <___vfprintf_internal_r+0x28c>
   10534:	10800dc4 	addi	r2,r2,55
   10538:	00000106 	br	10540 <___vfprintf_internal_r+0x290>
   1053c:	108015c4 	addi	r2,r2,87
   10540:	e0800005 	stb	r2,0(fp)
   10544:	b02f883a 	mov	r23,r22
   10548:	e7000044 	addi	fp,fp,1
   1054c:	003fe806 	br	104f0 <__alt_data_end+0xffff64f0>
   10550:	e6efc83a 	sub	r23,fp,sp
   10554:	9dc5c83a 	sub	r2,r19,r23
   10558:	0080090e 	bge	zero,r2,10580 <___vfprintf_internal_r+0x2d0>
   1055c:	e085883a 	add	r2,fp,r2
   10560:	01400c04 	movi	r5,48
   10564:	d8c00917 	ldw	r3,36(sp)
   10568:	e009883a 	mov	r4,fp
   1056c:	e0c0032e 	bgeu	fp,r3,1057c <___vfprintf_internal_r+0x2cc>
   10570:	e7000044 	addi	fp,fp,1
   10574:	21400005 	stb	r5,0(r4)
   10578:	e0bffa1e 	bne	fp,r2,10564 <__alt_data_end+0xffff6564>
   1057c:	e6efc83a 	sub	r23,fp,sp
   10580:	d8c00b17 	ldw	r3,44(sp)
   10584:	4dd1883a 	add	r8,r9,r23
   10588:	922dc83a 	sub	r22,r18,r8
   1058c:	18001626 	beq	r3,zero,105e8 <___vfprintf_internal_r+0x338>
   10590:	48000a26 	beq	r9,zero,105bc <___vfprintf_internal_r+0x30c>
   10594:	00800b44 	movi	r2,45
   10598:	d8800805 	stb	r2,32(sp)
   1059c:	88800117 	ldw	r2,4(r17)
   105a0:	01c00044 	movi	r7,1
   105a4:	d9800804 	addi	r6,sp,32
   105a8:	880b883a 	mov	r5,r17
   105ac:	a009883a 	mov	r4,r20
   105b0:	103ee83a 	callr	r2
   105b4:	10004a1e 	bne	r2,zero,106e0 <___vfprintf_internal_r+0x430>
   105b8:	84000044 	addi	r16,r16,1
   105bc:	0580070e 	bge	zero,r22,105dc <___vfprintf_internal_r+0x32c>
   105c0:	b00f883a 	mov	r7,r22
   105c4:	01800c04 	movi	r6,48
   105c8:	880b883a 	mov	r5,r17
   105cc:	a009883a 	mov	r4,r20
   105d0:	00102440 	call	10244 <print_repeat>
   105d4:	1000421e 	bne	r2,zero,106e0 <___vfprintf_internal_r+0x430>
   105d8:	85a1883a 	add	r16,r16,r22
   105dc:	e02d883a 	mov	r22,fp
   105e0:	bf2fc83a 	sub	r23,r23,fp
   105e4:	00002006 	br	10668 <___vfprintf_internal_r+0x3b8>
   105e8:	0580090e 	bge	zero,r22,10610 <___vfprintf_internal_r+0x360>
   105ec:	b00f883a 	mov	r7,r22
   105f0:	01800804 	movi	r6,32
   105f4:	880b883a 	mov	r5,r17
   105f8:	a009883a 	mov	r4,r20
   105fc:	da401015 	stw	r9,64(sp)
   10600:	00102440 	call	10244 <print_repeat>
   10604:	da401017 	ldw	r9,64(sp)
   10608:	1000351e 	bne	r2,zero,106e0 <___vfprintf_internal_r+0x430>
   1060c:	85a1883a 	add	r16,r16,r22
   10610:	483ff226 	beq	r9,zero,105dc <__alt_data_end+0xffff65dc>
   10614:	00800b44 	movi	r2,45
   10618:	d8800805 	stb	r2,32(sp)
   1061c:	88800117 	ldw	r2,4(r17)
   10620:	01c00044 	movi	r7,1
   10624:	d9800804 	addi	r6,sp,32
   10628:	880b883a 	mov	r5,r17
   1062c:	a009883a 	mov	r4,r20
   10630:	103ee83a 	callr	r2
   10634:	10002a1e 	bne	r2,zero,106e0 <___vfprintf_internal_r+0x430>
   10638:	84000044 	addi	r16,r16,1
   1063c:	003fe706 	br	105dc <__alt_data_end+0xffff65dc>
   10640:	b5bfffc4 	addi	r22,r22,-1
   10644:	b0800003 	ldbu	r2,0(r22)
   10648:	01c00044 	movi	r7,1
   1064c:	d9800804 	addi	r6,sp,32
   10650:	d8800805 	stb	r2,32(sp)
   10654:	88800117 	ldw	r2,4(r17)
   10658:	880b883a 	mov	r5,r17
   1065c:	a009883a 	mov	r4,r20
   10660:	103ee83a 	callr	r2
   10664:	10001e1e 	bne	r2,zero,106e0 <___vfprintf_internal_r+0x430>
   10668:	8585c83a 	sub	r2,r16,r22
   1066c:	b5c9883a 	add	r4,r22,r23
   10670:	e085883a 	add	r2,fp,r2
   10674:	013ff216 	blt	zero,r4,10640 <__alt_data_end+0xffff6640>
   10678:	1021883a 	mov	r16,r2
   1067c:	dd800d17 	ldw	r22,52(sp)
   10680:	00004406 	br	10794 <___vfprintf_internal_r+0x4e4>
   10684:	00800044 	movi	r2,1
   10688:	1480080e 	bge	r2,r18,106ac <___vfprintf_internal_r+0x3fc>
   1068c:	95ffffc4 	addi	r23,r18,-1
   10690:	b80f883a 	mov	r7,r23
   10694:	01800804 	movi	r6,32
   10698:	880b883a 	mov	r5,r17
   1069c:	a009883a 	mov	r4,r20
   106a0:	00102440 	call	10244 <print_repeat>
   106a4:	10000e1e 	bne	r2,zero,106e0 <___vfprintf_internal_r+0x430>
   106a8:	85e1883a 	add	r16,r16,r23
   106ac:	b0800017 	ldw	r2,0(r22)
   106b0:	01c00044 	movi	r7,1
   106b4:	d80d883a 	mov	r6,sp
   106b8:	d8800005 	stb	r2,0(sp)
   106bc:	88800117 	ldw	r2,4(r17)
   106c0:	880b883a 	mov	r5,r17
   106c4:	a009883a 	mov	r4,r20
   106c8:	b5c00104 	addi	r23,r22,4
   106cc:	103ee83a 	callr	r2
   106d0:	1000031e 	bne	r2,zero,106e0 <___vfprintf_internal_r+0x430>
   106d4:	84000044 	addi	r16,r16,1
   106d8:	b82d883a 	mov	r22,r23
   106dc:	00002d06 	br	10794 <___vfprintf_internal_r+0x4e4>
   106e0:	00bfffc4 	movi	r2,-1
   106e4:	00003106 	br	107ac <___vfprintf_internal_r+0x4fc>
   106e8:	b5c00017 	ldw	r23,0(r22)
   106ec:	b7000104 	addi	fp,r22,4
   106f0:	b809883a 	mov	r4,r23
   106f4:	00108b00 	call	108b0 <strlen>
   106f8:	9091c83a 	sub	r8,r18,r2
   106fc:	102d883a 	mov	r22,r2
   10700:	0200090e 	bge	zero,r8,10728 <___vfprintf_internal_r+0x478>
   10704:	400f883a 	mov	r7,r8
   10708:	01800804 	movi	r6,32
   1070c:	880b883a 	mov	r5,r17
   10710:	a009883a 	mov	r4,r20
   10714:	da001015 	stw	r8,64(sp)
   10718:	00102440 	call	10244 <print_repeat>
   1071c:	da001017 	ldw	r8,64(sp)
   10720:	103fef1e 	bne	r2,zero,106e0 <__alt_data_end+0xffff66e0>
   10724:	8221883a 	add	r16,r16,r8
   10728:	88800117 	ldw	r2,4(r17)
   1072c:	b00f883a 	mov	r7,r22
   10730:	b80d883a 	mov	r6,r23
   10734:	880b883a 	mov	r5,r17
   10738:	a009883a 	mov	r4,r20
   1073c:	103ee83a 	callr	r2
   10740:	103fe71e 	bne	r2,zero,106e0 <__alt_data_end+0xffff66e0>
   10744:	85a1883a 	add	r16,r16,r22
   10748:	e02d883a 	mov	r22,fp
   1074c:	00001106 	br	10794 <___vfprintf_internal_r+0x4e4>
   10750:	00c00044 	movi	r3,1
   10754:	04ffffc4 	movi	r19,-1
   10758:	d8000e15 	stw	zero,56(sp)
   1075c:	d8c00a15 	stw	r3,40(sp)
   10760:	05400284 	movi	r21,10
   10764:	9825883a 	mov	r18,r19
   10768:	d8000c15 	stw	zero,48(sp)
   1076c:	d8000b15 	stw	zero,44(sp)
   10770:	182f883a 	mov	r23,r3
   10774:	00000806 	br	10798 <___vfprintf_internal_r+0x4e8>
   10778:	ddc00b15 	stw	r23,44(sp)
   1077c:	05c00084 	movi	r23,2
   10780:	00000506 	br	10798 <___vfprintf_internal_r+0x4e8>
   10784:	00c00044 	movi	r3,1
   10788:	d8c00c15 	stw	r3,48(sp)
   1078c:	05c000c4 	movi	r23,3
   10790:	00000106 	br	10798 <___vfprintf_internal_r+0x4e8>
   10794:	002f883a 	mov	r23,zero
   10798:	d8c00f17 	ldw	r3,60(sp)
   1079c:	18c00044 	addi	r3,r3,1
   107a0:	d8c00f15 	stw	r3,60(sp)
   107a4:	003edc06 	br	10318 <__alt_data_end+0xffff6318>
   107a8:	8005883a 	mov	r2,r16
   107ac:	dfc01a17 	ldw	ra,104(sp)
   107b0:	df001917 	ldw	fp,100(sp)
   107b4:	ddc01817 	ldw	r23,96(sp)
   107b8:	dd801717 	ldw	r22,92(sp)
   107bc:	dd401617 	ldw	r21,88(sp)
   107c0:	dd001517 	ldw	r20,84(sp)
   107c4:	dcc01417 	ldw	r19,80(sp)
   107c8:	dc801317 	ldw	r18,76(sp)
   107cc:	dc401217 	ldw	r17,72(sp)
   107d0:	dc001117 	ldw	r16,68(sp)
   107d4:	dec01b04 	addi	sp,sp,108
   107d8:	f800283a 	ret

000107dc <__vfprintf_internal>:
   107dc:	00800074 	movhi	r2,1
   107e0:	10838704 	addi	r2,r2,3612
   107e4:	300f883a 	mov	r7,r6
   107e8:	280d883a 	mov	r6,r5
   107ec:	200b883a 	mov	r5,r4
   107f0:	11000017 	ldw	r4,0(r2)
   107f4:	00102b01 	jmpi	102b0 <___vfprintf_internal_r>

000107f8 <__sfvwrite_small_dev>:
   107f8:	2880000b 	ldhu	r2,0(r5)
   107fc:	1080020c 	andi	r2,r2,8
   10800:	10002126 	beq	r2,zero,10888 <__sfvwrite_small_dev+0x90>
   10804:	2880008f 	ldh	r2,2(r5)
   10808:	defffa04 	addi	sp,sp,-24
   1080c:	dc000015 	stw	r16,0(sp)
   10810:	dfc00515 	stw	ra,20(sp)
   10814:	dd000415 	stw	r20,16(sp)
   10818:	dcc00315 	stw	r19,12(sp)
   1081c:	dc800215 	stw	r18,8(sp)
   10820:	dc400115 	stw	r17,4(sp)
   10824:	2821883a 	mov	r16,r5
   10828:	10001216 	blt	r2,zero,10874 <__sfvwrite_small_dev+0x7c>
   1082c:	2027883a 	mov	r19,r4
   10830:	3025883a 	mov	r18,r6
   10834:	3823883a 	mov	r17,r7
   10838:	05010004 	movi	r20,1024
   1083c:	04400b0e 	bge	zero,r17,1086c <__sfvwrite_small_dev+0x74>
   10840:	880f883a 	mov	r7,r17
   10844:	a440010e 	bge	r20,r17,1084c <__sfvwrite_small_dev+0x54>
   10848:	01c10004 	movi	r7,1024
   1084c:	8140008f 	ldh	r5,2(r16)
   10850:	900d883a 	mov	r6,r18
   10854:	9809883a 	mov	r4,r19
   10858:	00108cc0 	call	108cc <_write_r>
   1085c:	0080050e 	bge	zero,r2,10874 <__sfvwrite_small_dev+0x7c>
   10860:	88a3c83a 	sub	r17,r17,r2
   10864:	90a5883a 	add	r18,r18,r2
   10868:	003ff406 	br	1083c <__alt_data_end+0xffff683c>
   1086c:	0005883a 	mov	r2,zero
   10870:	00000706 	br	10890 <__sfvwrite_small_dev+0x98>
   10874:	8080000b 	ldhu	r2,0(r16)
   10878:	10801014 	ori	r2,r2,64
   1087c:	8080000d 	sth	r2,0(r16)
   10880:	00bfffc4 	movi	r2,-1
   10884:	00000206 	br	10890 <__sfvwrite_small_dev+0x98>
   10888:	00bfffc4 	movi	r2,-1
   1088c:	f800283a 	ret
   10890:	dfc00517 	ldw	ra,20(sp)
   10894:	dd000417 	ldw	r20,16(sp)
   10898:	dcc00317 	ldw	r19,12(sp)
   1089c:	dc800217 	ldw	r18,8(sp)
   108a0:	dc400117 	ldw	r17,4(sp)
   108a4:	dc000017 	ldw	r16,0(sp)
   108a8:	dec00604 	addi	sp,sp,24
   108ac:	f800283a 	ret

000108b0 <strlen>:
   108b0:	2005883a 	mov	r2,r4
   108b4:	10c00007 	ldb	r3,0(r2)
   108b8:	18000226 	beq	r3,zero,108c4 <strlen+0x14>
   108bc:	10800044 	addi	r2,r2,1
   108c0:	003ffc06 	br	108b4 <__alt_data_end+0xffff68b4>
   108c4:	1105c83a 	sub	r2,r2,r4
   108c8:	f800283a 	ret

000108cc <_write_r>:
   108cc:	defffd04 	addi	sp,sp,-12
   108d0:	dc000015 	stw	r16,0(sp)
   108d4:	04000074 	movhi	r16,1
   108d8:	dc400115 	stw	r17,4(sp)
   108dc:	8403c604 	addi	r16,r16,3864
   108e0:	2023883a 	mov	r17,r4
   108e4:	2809883a 	mov	r4,r5
   108e8:	300b883a 	mov	r5,r6
   108ec:	380d883a 	mov	r6,r7
   108f0:	dfc00215 	stw	ra,8(sp)
   108f4:	80000015 	stw	zero,0(r16)
   108f8:	0010c440 	call	10c44 <write>
   108fc:	00ffffc4 	movi	r3,-1
   10900:	10c0031e 	bne	r2,r3,10910 <_write_r+0x44>
   10904:	80c00017 	ldw	r3,0(r16)
   10908:	18000126 	beq	r3,zero,10910 <_write_r+0x44>
   1090c:	88c00015 	stw	r3,0(r17)
   10910:	dfc00217 	ldw	ra,8(sp)
   10914:	dc400117 	ldw	r17,4(sp)
   10918:	dc000017 	ldw	r16,0(sp)
   1091c:	dec00304 	addi	sp,sp,12
   10920:	f800283a 	ret

00010924 <__divsi3>:
   10924:	20001b16 	blt	r4,zero,10994 <__divsi3+0x70>
   10928:	000f883a 	mov	r7,zero
   1092c:	28001616 	blt	r5,zero,10988 <__divsi3+0x64>
   10930:	200d883a 	mov	r6,r4
   10934:	29001a2e 	bgeu	r5,r4,109a0 <__divsi3+0x7c>
   10938:	00800804 	movi	r2,32
   1093c:	00c00044 	movi	r3,1
   10940:	00000106 	br	10948 <__divsi3+0x24>
   10944:	10000d26 	beq	r2,zero,1097c <__divsi3+0x58>
   10948:	294b883a 	add	r5,r5,r5
   1094c:	10bfffc4 	addi	r2,r2,-1
   10950:	18c7883a 	add	r3,r3,r3
   10954:	293ffb36 	bltu	r5,r4,10944 <__alt_data_end+0xffff6944>
   10958:	0005883a 	mov	r2,zero
   1095c:	18000726 	beq	r3,zero,1097c <__divsi3+0x58>
   10960:	0005883a 	mov	r2,zero
   10964:	31400236 	bltu	r6,r5,10970 <__divsi3+0x4c>
   10968:	314dc83a 	sub	r6,r6,r5
   1096c:	10c4b03a 	or	r2,r2,r3
   10970:	1806d07a 	srli	r3,r3,1
   10974:	280ad07a 	srli	r5,r5,1
   10978:	183ffa1e 	bne	r3,zero,10964 <__alt_data_end+0xffff6964>
   1097c:	38000126 	beq	r7,zero,10984 <__divsi3+0x60>
   10980:	0085c83a 	sub	r2,zero,r2
   10984:	f800283a 	ret
   10988:	014bc83a 	sub	r5,zero,r5
   1098c:	39c0005c 	xori	r7,r7,1
   10990:	003fe706 	br	10930 <__alt_data_end+0xffff6930>
   10994:	0109c83a 	sub	r4,zero,r4
   10998:	01c00044 	movi	r7,1
   1099c:	003fe306 	br	1092c <__alt_data_end+0xffff692c>
   109a0:	00c00044 	movi	r3,1
   109a4:	003fee06 	br	10960 <__alt_data_end+0xffff6960>

000109a8 <__modsi3>:
   109a8:	20001716 	blt	r4,zero,10a08 <__modsi3+0x60>
   109ac:	000f883a 	mov	r7,zero
   109b0:	2005883a 	mov	r2,r4
   109b4:	28001216 	blt	r5,zero,10a00 <__modsi3+0x58>
   109b8:	2900162e 	bgeu	r5,r4,10a14 <__modsi3+0x6c>
   109bc:	01800804 	movi	r6,32
   109c0:	00c00044 	movi	r3,1
   109c4:	00000106 	br	109cc <__modsi3+0x24>
   109c8:	30000a26 	beq	r6,zero,109f4 <__modsi3+0x4c>
   109cc:	294b883a 	add	r5,r5,r5
   109d0:	31bfffc4 	addi	r6,r6,-1
   109d4:	18c7883a 	add	r3,r3,r3
   109d8:	293ffb36 	bltu	r5,r4,109c8 <__alt_data_end+0xffff69c8>
   109dc:	18000526 	beq	r3,zero,109f4 <__modsi3+0x4c>
   109e0:	1806d07a 	srli	r3,r3,1
   109e4:	11400136 	bltu	r2,r5,109ec <__modsi3+0x44>
   109e8:	1145c83a 	sub	r2,r2,r5
   109ec:	280ad07a 	srli	r5,r5,1
   109f0:	183ffb1e 	bne	r3,zero,109e0 <__alt_data_end+0xffff69e0>
   109f4:	38000126 	beq	r7,zero,109fc <__modsi3+0x54>
   109f8:	0085c83a 	sub	r2,zero,r2
   109fc:	f800283a 	ret
   10a00:	014bc83a 	sub	r5,zero,r5
   10a04:	003fec06 	br	109b8 <__alt_data_end+0xffff69b8>
   10a08:	0109c83a 	sub	r4,zero,r4
   10a0c:	01c00044 	movi	r7,1
   10a10:	003fe706 	br	109b0 <__alt_data_end+0xffff69b0>
   10a14:	00c00044 	movi	r3,1
   10a18:	003ff106 	br	109e0 <__alt_data_end+0xffff69e0>

00010a1c <__udivsi3>:
   10a1c:	200d883a 	mov	r6,r4
   10a20:	2900152e 	bgeu	r5,r4,10a78 <__udivsi3+0x5c>
   10a24:	28001416 	blt	r5,zero,10a78 <__udivsi3+0x5c>
   10a28:	00800804 	movi	r2,32
   10a2c:	00c00044 	movi	r3,1
   10a30:	00000206 	br	10a3c <__udivsi3+0x20>
   10a34:	10000e26 	beq	r2,zero,10a70 <__udivsi3+0x54>
   10a38:	28000516 	blt	r5,zero,10a50 <__udivsi3+0x34>
   10a3c:	294b883a 	add	r5,r5,r5
   10a40:	10bfffc4 	addi	r2,r2,-1
   10a44:	18c7883a 	add	r3,r3,r3
   10a48:	293ffa36 	bltu	r5,r4,10a34 <__alt_data_end+0xffff6a34>
   10a4c:	18000826 	beq	r3,zero,10a70 <__udivsi3+0x54>
   10a50:	0005883a 	mov	r2,zero
   10a54:	31400236 	bltu	r6,r5,10a60 <__udivsi3+0x44>
   10a58:	314dc83a 	sub	r6,r6,r5
   10a5c:	10c4b03a 	or	r2,r2,r3
   10a60:	1806d07a 	srli	r3,r3,1
   10a64:	280ad07a 	srli	r5,r5,1
   10a68:	183ffa1e 	bne	r3,zero,10a54 <__alt_data_end+0xffff6a54>
   10a6c:	f800283a 	ret
   10a70:	0005883a 	mov	r2,zero
   10a74:	f800283a 	ret
   10a78:	00c00044 	movi	r3,1
   10a7c:	003ff406 	br	10a50 <__alt_data_end+0xffff6a50>

00010a80 <__umodsi3>:
   10a80:	2005883a 	mov	r2,r4
   10a84:	2900122e 	bgeu	r5,r4,10ad0 <__umodsi3+0x50>
   10a88:	28001116 	blt	r5,zero,10ad0 <__umodsi3+0x50>
   10a8c:	01800804 	movi	r6,32
   10a90:	00c00044 	movi	r3,1
   10a94:	00000206 	br	10aa0 <__umodsi3+0x20>
   10a98:	30000c26 	beq	r6,zero,10acc <__umodsi3+0x4c>
   10a9c:	28000516 	blt	r5,zero,10ab4 <__umodsi3+0x34>
   10aa0:	294b883a 	add	r5,r5,r5
   10aa4:	31bfffc4 	addi	r6,r6,-1
   10aa8:	18c7883a 	add	r3,r3,r3
   10aac:	293ffa36 	bltu	r5,r4,10a98 <__alt_data_end+0xffff6a98>
   10ab0:	18000626 	beq	r3,zero,10acc <__umodsi3+0x4c>
   10ab4:	1806d07a 	srli	r3,r3,1
   10ab8:	11400136 	bltu	r2,r5,10ac0 <__umodsi3+0x40>
   10abc:	1145c83a 	sub	r2,r2,r5
   10ac0:	280ad07a 	srli	r5,r5,1
   10ac4:	183ffb1e 	bne	r3,zero,10ab4 <__alt_data_end+0xffff6ab4>
   10ac8:	f800283a 	ret
   10acc:	f800283a 	ret
   10ad0:	00c00044 	movi	r3,1
   10ad4:	003ff706 	br	10ab4 <__alt_data_end+0xffff6ab4>

00010ad8 <__mulsi3>:
   10ad8:	0005883a 	mov	r2,zero
   10adc:	20000726 	beq	r4,zero,10afc <__mulsi3+0x24>
   10ae0:	20c0004c 	andi	r3,r4,1
   10ae4:	2008d07a 	srli	r4,r4,1
   10ae8:	18000126 	beq	r3,zero,10af0 <__mulsi3+0x18>
   10aec:	1145883a 	add	r2,r2,r5
   10af0:	294b883a 	add	r5,r5,r5
   10af4:	203ffa1e 	bne	r4,zero,10ae0 <__alt_data_end+0xffff6ae0>
   10af8:	f800283a 	ret
   10afc:	f800283a 	ret

00010b00 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10b00:	deffff04 	addi	sp,sp,-4
   10b04:	01000074 	movhi	r4,1
   10b08:	01400074 	movhi	r5,1
   10b0c:	dfc00015 	stw	ra,0(sp)
   10b10:	21034e04 	addi	r4,r4,3384
   10b14:	29438a04 	addi	r5,r5,3624

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10b18:	2140061e 	bne	r4,r5,10b34 <alt_load+0x34>
   10b1c:	01000074 	movhi	r4,1
   10b20:	01400074 	movhi	r5,1
   10b24:	21000804 	addi	r4,r4,32
   10b28:	29400804 	addi	r5,r5,32
   10b2c:	2140121e 	bne	r4,r5,10b78 <alt_load+0x78>
   10b30:	00000b06 	br	10b60 <alt_load+0x60>
   10b34:	00c00074 	movhi	r3,1
   10b38:	18c38a04 	addi	r3,r3,3624
   10b3c:	1907c83a 	sub	r3,r3,r4
   10b40:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10b44:	10fff526 	beq	r2,r3,10b1c <__alt_data_end+0xffff6b1c>
    {
      *to++ = *from++;
   10b48:	114f883a 	add	r7,r2,r5
   10b4c:	39c00017 	ldw	r7,0(r7)
   10b50:	110d883a 	add	r6,r2,r4
   10b54:	10800104 	addi	r2,r2,4
   10b58:	31c00015 	stw	r7,0(r6)
   10b5c:	003ff906 	br	10b44 <__alt_data_end+0xffff6b44>
   10b60:	01000074 	movhi	r4,1
   10b64:	01400074 	movhi	r5,1
   10b68:	21034304 	addi	r4,r4,3340
   10b6c:	29434304 	addi	r5,r5,3340

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10b70:	2140101e 	bne	r4,r5,10bb4 <alt_load+0xb4>
   10b74:	00000b06 	br	10ba4 <alt_load+0xa4>
   10b78:	00c00074 	movhi	r3,1
   10b7c:	18c00804 	addi	r3,r3,32
   10b80:	1907c83a 	sub	r3,r3,r4
   10b84:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10b88:	10fff526 	beq	r2,r3,10b60 <__alt_data_end+0xffff6b60>
    {
      *to++ = *from++;
   10b8c:	114f883a 	add	r7,r2,r5
   10b90:	39c00017 	ldw	r7,0(r7)
   10b94:	110d883a 	add	r6,r2,r4
   10b98:	10800104 	addi	r2,r2,4
   10b9c:	31c00015 	stw	r7,0(r6)
   10ba0:	003ff906 	br	10b88 <__alt_data_end+0xffff6b88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10ba4:	0010cfc0 	call	10cfc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10ba8:	dfc00017 	ldw	ra,0(sp)
   10bac:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10bb0:	0010d001 	jmpi	10d00 <alt_icache_flush_all>
   10bb4:	00c00074 	movhi	r3,1
   10bb8:	18c34e04 	addi	r3,r3,3384
   10bbc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10bc0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10bc4:	18bff726 	beq	r3,r2,10ba4 <__alt_data_end+0xffff6ba4>
    {
      *to++ = *from++;
   10bc8:	114f883a 	add	r7,r2,r5
   10bcc:	39c00017 	ldw	r7,0(r7)
   10bd0:	110d883a 	add	r6,r2,r4
   10bd4:	10800104 	addi	r2,r2,4
   10bd8:	31c00015 	stw	r7,0(r6)
   10bdc:	003ff906 	br	10bc4 <__alt_data_end+0xffff6bc4>

00010be0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10be0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10be4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10be8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10bec:	0010ca40 	call	10ca4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10bf0:	0010cc40 	call	10cc4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10bf4:	d1a04117 	ldw	r6,-32508(gp)
   10bf8:	d1604217 	ldw	r5,-32504(gp)
   10bfc:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10c00:	dfc00017 	ldw	ra,0(sp)
   10c04:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10c08:	00100b01 	jmpi	100b0 <main>

00010c0c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10c0c:	defffe04 	addi	sp,sp,-8
   10c10:	dc000015 	stw	r16,0(sp)
   10c14:	dfc00115 	stw	ra,4(sp)
   10c18:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10c1c:	00108b00 	call	108b0 <strlen>
   10c20:	01000074 	movhi	r4,1
   10c24:	000f883a 	mov	r7,zero
   10c28:	100d883a 	mov	r6,r2
   10c2c:	800b883a 	mov	r5,r16
   10c30:	21038804 	addi	r4,r4,3616
#else
    return fputs(str, stdout);
#endif
#endif
}
   10c34:	dfc00117 	ldw	ra,4(sp)
   10c38:	dc000017 	ldw	r16,0(sp)
   10c3c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10c40:	0010cc81 	jmpi	10cc8 <altera_avalon_jtag_uart_write>

00010c44 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10c44:	00800044 	movi	r2,1
   10c48:	20800226 	beq	r4,r2,10c54 <write+0x10>
   10c4c:	00800084 	movi	r2,2
   10c50:	2080041e 	bne	r4,r2,10c64 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10c54:	01000074 	movhi	r4,1
   10c58:	000f883a 	mov	r7,zero
   10c5c:	21038804 	addi	r4,r4,3616
   10c60:	0010cc81 	jmpi	10cc8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10c64:	d0a00317 	ldw	r2,-32756(gp)
   10c68:	10000926 	beq	r2,zero,10c90 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10c6c:	deffff04 	addi	sp,sp,-4
   10c70:	dfc00015 	stw	ra,0(sp)
   10c74:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10c78:	00c01444 	movi	r3,81
   10c7c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10c80:	00bfffc4 	movi	r2,-1
   10c84:	dfc00017 	ldw	ra,0(sp)
   10c88:	dec00104 	addi	sp,sp,4
   10c8c:	f800283a 	ret
   10c90:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10c94:	00c01444 	movi	r3,81
   10c98:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10c9c:	00bfffc4 	movi	r2,-1
   10ca0:	f800283a 	ret

00010ca4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10ca4:	deffff04 	addi	sp,sp,-4
   10ca8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_MCU, NIOS_MCU);
   10cac:	0010d040 	call	10d04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10cb0:	00800044 	movi	r2,1
   10cb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10cb8:	dfc00017 	ldw	ra,0(sp)
   10cbc:	dec00104 	addi	sp,sp,4
   10cc0:	f800283a 	ret

00010cc4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10cc4:	f800283a 	ret

00010cc8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10cc8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10ccc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10cd0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10cd4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10cd8:	2980072e 	bgeu	r5,r6,10cf8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10cdc:	38c00037 	ldwio	r3,0(r7)
   10ce0:	18ffffec 	andhi	r3,r3,65535
   10ce4:	183ffc26 	beq	r3,zero,10cd8 <__alt_data_end+0xffff6cd8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10ce8:	28c00007 	ldb	r3,0(r5)
   10cec:	20c00035 	stwio	r3,0(r4)
   10cf0:	29400044 	addi	r5,r5,1
   10cf4:	003ff806 	br	10cd8 <__alt_data_end+0xffff6cd8>

  return count;
}
   10cf8:	f800283a 	ret

00010cfc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10cfc:	f800283a 	ret

00010d00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10d00:	f800283a 	ret

00010d04 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10d04:	000170fa 	wrctl	ienable,zero
   10d08:	f800283a 	ret
